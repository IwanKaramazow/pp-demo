// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';


var Gl = /* module */[];

var Document = /* module */[];

function initializeVertexBuffer(gl) {
  var vertexPositions = /* array */[
    0.75,
    0.75,
    0,
    1,
    0.75,
    -0.75,
    0,
    1,
    -0.75,
    -0.75,
    0,
    1
  ];
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositions), gl.STATIC_DRAW);
  return buffer;
}

var vertexShaderString = "attribute vec4 position;\n  void main() {\n    gl_Position = position;\n  }\n";

var fragmentShaderString = "void main() {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.1);\n  }\n";

function createShaders(gl) {
  var vertexShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vertexShader, vertexShaderString);
  gl.compileShader(vertexShader);
  var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fragmentShader, fragmentShaderString);
  gl.compileShader(fragmentShader);
  return /* tuple */[
          vertexShader,
          fragmentShader
        ];
}

var q = document.getElementById("canvas");

if (!(q == null)) {
  var gl = q.getContext("webgl");
  if (gl == null) {
    console.log("no webgl available");
  } else {
    var program = gl.createProgram();
    var match = createShaders(gl);
    gl.attachShader(program, match[0]);
    gl.attachShader(program, match[1]);
    gl.linkProgram(program);
    gl.useProgram(program);
    var buffer = initializeVertexBuffer(gl);
    gl.clearColor(0, 0, 0, 1);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.enableVertexAttribArray(0);
    gl.vertexAttribPointer(0, 4, gl.FLOAT, false, 0, 0);
    gl.drawArrays(gl.TRIANGLES, 0, 3);
    gl.disableVertexAttribArray(0);
  }
}

exports.Gl = Gl;
exports.Document = Document;
exports.initializeVertexBuffer = initializeVertexBuffer;
exports.vertexShaderString = vertexShaderString;
exports.fragmentShaderString = fragmentShaderString;
exports.createShaders = createShaders;
exports.q = q;
/* q Not a pure module */
